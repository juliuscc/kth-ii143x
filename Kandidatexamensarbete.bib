Automatically generated by Mendeley Desktop 1.17.13
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@misc{Limenius,
author = {Limenius},
title = {{Liform}},
url = {https://github.com/Limenius/liform},
urldate = {2018-04-20}
}
@inproceedings{Pezoa2016,
address = {New York, New York, USA},
author = {Pezoa, Felipe and Reutter, Juan L. and Suarez, Fernando and Ugarte, Mart{\'{i}}n and Vrgo{\v{c}}, Domagoj},
booktitle = {Proceedings of the 25th International Conference on World Wide Web - WWW '16},
doi = {10.1145/2872427.2883029},
file = {:Users/jcelik/OneDrive/Dokument/KTH - Studier/Year 3/Kandidatexamensarbete/3. Resources/p263-pezoa.pdf:pdf},
isbn = {9781450341431},
pages = {263--273},
publisher = {ACM Press},
title = {{Foundations of JSON Schema}},
url = {http://dl.acm.org/citation.cfm?doid=2872427.2883029},
year = {2016}
}
@article{Liu2014,
abstract = {Relational Database Management Systems (RDBMS) have been very successful at managing structured data with well-defined schemas. Despite this, relational systems are generally not the first choice for management of data where schemas are not predefined or must be flexible in the face of variations and changes. Instead, No-SQL database systems supporting JSON are often selected to provide persistence to such applications. JSON is a light-weight and flexible semi-structured data format supporting constructs common in most programming languages. In this paper, we analyze the way in which requirements differ between management of relational data and management of JSON data. We present three architectural principles that facilitate a schemaless development style within an RDBMS so that RDBMS users can store, query, and index JSON data without requiring schemas. We show how these three principles can be applied to industry leading RDBMS platforms, such as the Oracle RDBMS Server, with relatively little effort. Consequently, an RDBMS can unify the management of both relational data and JSON data in one platform and use SQL with an embedded JSON path language as a single declarative language to query both relational data and JSON data. This SQL/JSON approach offers significant benefits to application developers as they can use one product to manage both relational data and semi-structured flexible schema data. {\textcopyright} 2014 ACM.},
author = {Liu, Z H and Hammerschmidt, B and McMahon, D},
doi = {10.1145/2588555.2595628},
file = {:Users/jcelik/OneDrive/Dokument/KTH - Studier/Year 3/Kandidatexamensarbete/3. Resources/p1247-liu.pdf:pdf},
isbn = {9781450323765},
issn = {07308078},
journal = {Proceedings of the ACM SIGMOD International Conference on Management of Data},
keywords = {all or part of,granted without fee provided,json,made or,no-sql,or classroom use is,or hard copies of,permission to make digital,schema-less,sql,that copies are not,this work for personal,xml},
pages = {1247--1258},
title = {{JSON data management-Supporting schema-less development in RDBMS}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904359305{\&}partnerID=40{\&}md5=7e6e8475d8c9ecf6b1fd9abae4132060},
year = {2014}
}
@misc{Ehne,
author = {Ehne, Roland},
title = {{LS Elektronik About - LS Elektronik}},
url = {http://www.lse.se/about/},
urldate = {2018-04-06}
}
@techreport{Andrews2018,
abstract = {JSON Schema (application/schema+json) has several purposes, one of which is JSON instance validation. This document specifies a vocabulary for JSON Schema to describe the meaning of JSON documents, provide hints for user interfaces working with JSON data, and to make assertions about what a valid document must look like.},
author = {Andrews, Henry and Wright, Austin and {Internet Engineering Task Force}},
title = {draft-handrews-json-schema-validation-01},
url = {https://tools.ietf.org/html/draft-handrews-json-schema-validation-01},
year = {2018}
}
@techreport{Andrews2018a,
abstract = {JSON Schema is a JSON-based format for describing JSON data using various vocabularies. This document specifies a vocabulary for annotating JSON documents with hyperlinks. These hyperlinks include attributes describing how to manipulate and interact with remote resources through hypermedia environments such as HTTP, as well as determining whether the link is usable based on the instance value. The hyperlink serialization format described in this document is also usable independent of JSON Schema.},
author = {Andrews, Henry and Wright, Austin and {Internet Engineering Task Force}},
title = {draft-handrews-json-schema-hyperschema-01},
url = {https://tools.ietf.org/html/draft-handrews-json-schema-hyperschema-01},
year = {2018}
}
@article{ECMA2013,
abstract = {JSON is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript programming language, but is programming language independent. JSON defines a small set of structuring rules for the portable representation of structured data.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {ECMA, International},
doi = {10.17487/rfc7158},
eprint = {arXiv:1011.1669v3},
file = {:Users/jcelik/Library/Application Support/Mendeley Desktop/Downloaded/Unknown - Unknown - The JSON Data Interchange Syntax(2).pdf:pdf},
isbn = {9788578110796},
issn = {2070-1721},
journal = {ECMA International},
number = {October},
pages = {8},
pmid = {25246403},
title = {{The JSON Data Interchange Format}},
url = {http://www.ecma-international.org/publications/standards/Ecma-404.htm http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf},
volume = {1st Editio},
year = {2013}
}
@misc{Snowplow,
author = {Snowplow},
title = {{Schema Guru}},
url = {https://github.com/snowplow/schema-guru},
urldate = {2018-04-20}
}
@misc{MadsKristensen,
author = {{Mads Kristensen}},
title = {{JSON Schema Generator - Visual Studio Marketplace}},
url = {https://marketplace.visualstudio.com/items?itemName=MadsKristensen.JSONSchemaGenerator},
urldate = {2018-04-20}
}
@misc{Suter,
author = {Suter, Rico},
title = {{NJsonSchema for .NET}},
url = {https://github.com/RSuter/NJsonSchema},
urldate = {2018-04-20}
}
@techreport{A.Wright,
abstract = {JSON Schema defines the media type "application/schema+json", a JSON- based format for describing the structure of JSON data. JSON Schema asserts what a JSON document must look like, ways to extract information from it, and how to interact with it. The "application/ schema-instance+json" media type provides additional feature-rich integration with "application/schema+json" beyond what can be offered for "application/json" documents.},
annote = {draft-handrews-json-schema-00},
author = {Andrews, Henry and Wright, Austin and {Internet Engineering Task Force}},
title = {draft-handrews-json-schema-01},
url = {https://tools.ietf.org/html/draft-handrews-json-schema-01},
year = {2018}
}
@misc{Newtonsoft,
author = {Newtonsoft},
title = {{Json.NET Schema - Newtonsoft}},
url = {https://www.newtonsoft.com/jsonschema},
urldate = {2018-04-20}
}
@misc{TheJSONSchemaorganisation,
author = {{The JSON Schema organisation}},
title = {{Implementations | JSON Schema}},
url = {http://json-schema.org/implementations},
urldate = {2018-04-18}
}
@article{Abdou2018,
author = {Abdou, Mohamed and AbdelGaber, Sayed and Farhan, Marwa},
doi = {10.1016/j.future.2017.11.008},
file = {:Users/jcelik/OneDrive/Dokument/KTH - Studier/Year 3/Kandidatexamensarbete/3. Resources/1-s2.0-S0167739X17307343-main.pdf:pdf},
issn = {0167739X},
journal = {Future Generation Computer Systems},
month = {apr},
pages = {94--102},
title = {{A semi-automated framework for semantically annotating web content}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0167739X17307343},
volume = {81},
year = {2018}
}
@misc{Romanovich,
author = {Romanovich, Anton},
title = {{JSL}},
url = {https://github.com/aromanovich/jsl},
urldate = {2018-04-20}
}
@article{Brahmia2017a,
abstract = {TJSchema is a framework for the management of temporal documents stored in JSON format in a NoSQL database, similar to the tXSchema framework proposed for XML. In this work, we extend Schema to temporal schema versioning support. The proposed approach provides a systematic solution to the challenging task of evolving a JSON schema while maintaining all schema versions with their corresponding instances and, thus, guarantees the bookkeeping of a full history of both data and schemas. All components of a temporal JSON schema (i.e., conventional schema, temporal logical and physical characteristics) are allowed to vary over time to reflect changes in the real world and, thus, in application requirements. To this end, four sets of primitives for changing JSON schema components and their related JSON instance documents are introduced. The feasibility of our approach and the usage of the proposed primitives have been shown through a detailed and illustrative example.},
author = {Brahmia, Safa and Brahmia, Zouhaier and Grandi, Fabio and Bouaziz, Rafik},
file = {:Users/jcelik/OneDrive/Dokument/KTH - Studier/Year 3/Kandidatexamensarbete/3. Resources/JDIMpaper{\_}2017.pdf:pdf},
issn = {09727272},
journal = {Journal of Digital Information Management},
keywords = {Change propagation,JSON,JSON Schema,NoSQL,Schema change,Schema versioning,TJSchema},
number = {4},
pages = {179--202},
title = {{Temporal JSON schema versioning in the TJSchema framework}},
volume = {15},
year = {2017}
}
